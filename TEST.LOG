Starting tests
----------------STACK----------------
First test: push and pop
...pushing names of numbers
...popping them (should read ten..one)
ten
nine
eight
seven
six
five
four
three
two
one
...end of test 1
Second test: clone
...pushing names of numbers
...creating clone
...popping 1st five strings from new stack
...(should read ten..six)
ten
nine
eight
seven
six
...end of test 2
----------------QUEUE----------------
First test: append and pop
...appending names of numbers
...popping them (should read one..ten)
one
two
three
four
five
six
seven
eight
nine
ten
...end of test 1
Second test: clone
...appending names of numbers
...creating clone
...popping 1st five strings from new queue
...(should read one..five)
one
two
three
four
five
...end of test 2
----------------DEQUE----------------
First test: push/append and pop
...appending 1st 5 names of numbers
...pushing 2nd 5 names of numbers
...popping them (should read ten..six,one..five)
ten
nine
eight
seven
six
one
two
three
four
five
...end of test 1
Second test: clone
...appending 1st 5 names of numbers
...pushing 2nd 5 names of numbers
...creating clone
...popping 1st six strings from new deque
...(should read ten..six,one)
ten
nine
eight
seven
six
one
...end of test 2
----------------PRIORITY QUEUE----------------
First test: append and pop
...appending names of numbers
...popping them
...(should read eight,five,four,nine,one,seven,six,ten,three,two)
eight
five
four
nine
one
seven
six
ten
three
two
...end of test 1
Second test: clone
...appending names of numbers
...creating clone (but descending order)
...popping 1st five strings from new queue
...(should read two,three,ten,six,seven)
two
three
ten
six
seven
...end of test 2
Third test: reset Compare
...resetting compare
...popping strings from resorted queue
...(should read two,three,ten,six,seven,one,nine,four,five,eight)
two
three
ten
six
seven
one
nine
four
five
eight
...end of test 3
Fourth test: megatest
...appending 30,000 random strings
...popping strings, checking sequence
...end of test 4
